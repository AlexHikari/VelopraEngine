# rendering CMakeLists.txt
cmake_minimum_required(VERSION 3.8)
project(VelopraRenderer)

# Precompiled header file
set(PRECOMPILED_HEADER "${CMAKE_CURRENT_SOURCE_DIR}/include/VE_pch.h")

set(RENDERING_SOURCE_FILES
    src/VE_OpenGLCamera.cpp
    src/VE_OpenGLMesh.cpp
    src/VE_OpenGLModel.cpp
    src/VE_OpenGLRenderer.cpp
    src/VE_OpenGLShader.cpp
    src/VE_OpenGLTransform.cpp
    src/VE_pch.cpp
    src/VE_RenderUtils.cpp
)
set(RENDERING_HEADER_FILES
    include/stb_image.h
    include/VE_ICamera.h
    include/VE_IMesh.h
    include/VE_IModel.h
    include/VE_IRenderer.h
    include/VE_IShader.h
    include/VE_ITexture.h
    include/VE_ITransform.h
    include/VE_IWindowSizeObserver.h
    include/VE_OpenGLCamera.h
    include/VE_OpenGLMesh.h
    include/VE_OpenGLModel.h
    include/VE_OpenGLRenderer.h
    include/VE_OpenGlShader.h
    include/VE_OpenGLTexture.h
    include/VE_OpenGLTransform.h
    include/VE_pch.h
    include/VE_RendererAPI.h
    include/VE_RenderUtils.h
)

# Create the Renderer library
add_library(VelopraRenderer ${RENDERING_SOURCE_FILES} ${RENDERING_HEADER_FILES})

# Define BUILDING_RENDERER_DLL when building a shared library
if(BUILD_SHARED_LIBS)
    target_compile_definitions(VelopraRenderer PRIVATE BUILDING_RENDERER_DLL)
endif()


# Find necessary packages
find_package(OpenGL REQUIRED)
find_package(GLEW REQUIRED)
find_package(assimp REQUIRED)
find_package(glm REQUIRED)

target_link_directories(VelopraRenderer PRIVATE
    ${GLEW_INCLUDE_DIRS}
    ${GLFW_INCLUDE_DIRS}
    ${ASSIMP_INCLUDE_DIRS}
    ${GLM_INCLUDE_DIRS}
)
target_include_directories(VelopraRenderer PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
)
# Link with Core module and external libraries
target_link_libraries(VelopraRenderer PRIVATE 
    VelopraCore
    GLEW::GLEW
    OpenGL::GL 
    glm::glm
    assimp::assimp
)
# Enable precompiled headers
target_precompile_headers(VelopraRenderer PRIVATE ${PRECOMPILED_HEADER})
